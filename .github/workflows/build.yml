name: CI/CD Pipeline

# Trigger the workflow on push or pull request to the main branch, or on a manual workflow dispatch.
on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    # Define service containers for MongoDB and Redis with specific versions.
    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
      redis: 
        image: redis:6.0
        ports:
          - 6379:6379

    # Define environment variables for the job.
    env:
      NODE_ENV: test

    steps:
      # Check out the repository code.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20         

      # Set up Docker Buildx for more advanced build capabilities.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to DockerHub using secrets for username and password/token.
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Cache Node.js modules using a hash of the package-lock.json to restore cache.
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Build Docker images using docker-compose, with caching to speed up subsequent builds.
      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker-compose.yml
          push: true
          # Make sure to replace <your-dockerhub-username>/<repository-name> with your actual DockerHub username and repository or image name.
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/umdali:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

  # Define a job to test the backend, dependent on the build job completing successfully.
  test-backend:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Run backend tests within the Docker environment.
      - name: Run backend tests
        id: run-backend-tests
        run: |
          docker-compose -f docker-compose.yml run --rm backend npm test
        continue-on-error: true

      # Check the outcome of the backend tests and fail the job if tests failed.
      - name: Check Backend Test Results
        if: steps.run-backend-tests.outcome == 'failure'
        run: |
          echo "Backend tests failed!"
          exit 1 

  # Define a job to test the frontend, with a similar setup to the backend testing.
  test-frontend:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Run frontend tests within the Docker environment.
      - name: Run frontend tests
        id: run-frontend-tests
        run: |
          docker-compose -f docker-compose.yml run --rm frontend npm test
        continue-on-error: true 

      # Check the outcome of the frontend tests and fail the job if tests failed.
      - name: Check Frontend Test Results
        if: steps.run-frontend-tests.outcome == 'failure'
        run: |
          echo "Frontend tests failed!"
          exit 1 